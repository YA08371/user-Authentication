// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	input "authenticator-backend/usecase/input"

	mock "github.com/stretchr/testify/mock"

	output "authenticator-backend/usecase/output"
)

// IAuthUsecase is an autogenerated mock type for the IAuthUsecase type
type IAuthUsecase struct {
	mock.Mock
}

// ChangePassword provides a mock function with given fields: _a0
func (_m *IAuthUsecase) ChangePassword(_a0 input.ChangePasswordParam) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(input.ChangePasswordParam) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: _a0
func (_m *IAuthUsecase) Login(_a0 input.LoginParam) (output.LoginResponse, error) {
	ret := _m.Called(_a0)

	var r0 output.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(input.LoginParam) (output.LoginResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(input.LoginParam) output.LoginResponse); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(output.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(input.LoginParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Refresh provides a mock function with given fields: _a0
func (_m *IAuthUsecase) Refresh(_a0 input.RefreshParam) (output.RefreshResponse, error) {
	ret := _m.Called(_a0)

	var r0 output.RefreshResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(input.RefreshParam) (output.RefreshResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(input.RefreshParam) output.RefreshResponse); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(output.RefreshResponse)
	}

	if rf, ok := ret.Get(1).(func(input.RefreshParam) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIAuthUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewIAuthUsecase creates a new instance of IAuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIAuthUsecase(t mockConstructorTestingTNewIAuthUsecase) *IAuthUsecase {
	mock := &IAuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
